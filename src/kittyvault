#!/bin/bash

set -euo pipefail

# --------------------------------------------------------------------------------------------
# kittyvault â€” Usb encrypter using veracrypt
# --------------------------------------------------------------------------------------------

VERSION="kittyvault version 0.1.0 (dev)"
SELECTED_DISK=""
DEPENDENCIES=("lolcat" "veracrypt")

# User input ---------------------------------------------------------------------------------

get_number() {
    local num
    local valid_num=false
    while [[ "$valid_num" == false ]]; do
        read -p " > " num
        if [[ "$num" =~ ^[0-9]+$ ]] && ((num >= 0 && num < $1)); then
            echo "$num"
            valid_num=true
        else
            echo "Invalid input. Please enter a number from 0 to $(($1 - 1))"
        fi
    done
}

# Functions ----------------------------------------------------------------------------------

print_header() {
    cat <<\EOF | lolcat
   __ ___ __  __      _   __          ____
  / //_(_) /_/ /___ _| | / /__ ___ __/ / /_
 / ,< / / __/ __/ // / |/ / _ `/ // / / __/
/_/|_/_/\__/\__/\_, /|___/\_,_/\_,_/_/\__/
               /___/

EOF
}

ensure_installed() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo "Missing dependency: $1"
        exit 1
    fi
}

ensure_set() {
    if [[ -z "$1" ]]; then
        echo "FATAL: $2 is not set!"
        exit 1
    fi
}

select_disk() {
    disks=($(diskutil list | grep "external" | awk '{print $1}' || true))
    if [[ ${#disks[@]} -eq 0 ]]; then
        echo "No external disks found..."
        exit 1
    fi
    echo "Select target disk:"
    for ((i = 0; i < ${#disks[@]}; i++)); do
        item="${disks[$i]}"
        echo "  $i) $item ($(diskutil info "$item" | grep "Disk Size:" | awk '{print $3  $4}'))"
    done
    index=$(get_number ${#disks[@]})
    SELECTED_DISK=${disks[$index]}
}

# --------------------------------------------------------------------------------------------
# Arguments ----------------------------------------------------------------------------------

# @getoptions
parser_definition() {
    setup REST help:usage -- "Usage: kittyvault [options]... [arguments]..." ''
    msg -- 'Options:'
    flag QUICK -q --quick -- "Skip overwriting disk with random data on creation"
    disp :usage -h --help -- "Display help message"
    disp VERSION --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.2)
QUICK=''
REST=''
parse() {
    OPTIND=$(($# + 1))
    while OPTARG= && [ "${REST}" != x ] && [ $# -gt 0 ]; do
        case $1 in
        --?*=*)
            OPTARG=$1
            shift
            eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
            ;;
        --no-* | --without-*) unset OPTARG ;;
        -[qh]?*)
            OPTARG=$1
            shift
            eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
            case $2 in --*) set -- "$1" unknown "$2" && REST=x ;; esac
            OPTARG=
            ;;
        esac
        case $1 in
        '-q' | '--quick')
            [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
            eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
            QUICK="$OPTARG"
            ;;
        '-h' | '--help')
            usage
            exit 0
            ;;
        '--version')
            echo "${VERSION}"
            exit 0
            ;;
        --)
            shift
            while [ $# -gt 0 ]; do
                REST="${REST} \"\${$(($OPTIND - $#))}\""
                shift
            done
            break
            ;;
        [-]?*)
            set "unknown" "$1"
            break
            ;;
        *)
            REST="${REST} \"\${$(($OPTIND - $#))}\""
            ;;
        esac
        shift
    done
    [ $# -eq 0 ] && {
        OPTIND=1
        unset OPTARG
        return 0
    }
    case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@" ;;
    esac
    echo "$1" >&2
    exit 1
}
usage() {
    cat <<'GETOPTIONSHERE'
Usage: kittyvault [options]... [arguments]...

Options:
  -q, --quick                 Skip overwriting disk with random data on creation
  -h, --help                  Display help message
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

parse "$@"
eval "set -- $REST"
printf '%s\n' "$@"

echo "$QUICK" # DEBUG
exit 0        # DEBUG

# Dependencies -------------------------------------------------------------------------------

for dep in "${DEPENDENCIES[@]}"; do
    ensure_installed "$dep"
done

# Permissions --------------------------------------------------------------------------------

print_header
if [[ $EUID -ne 0 ]]; then
    echo "Kittyvault needs to be ran using sudo!" >&2
    exit 1
fi

# Parameters ---------------------------------------------------------------------------------

select_disk
echo "Selected disk $SELECTED_DISK"
read -s -p "Enter vault password: " password
echo ""

# Value check --------------------------------------------------------------------------------

ensure_set "$SELECTED_DISK" "Target disk"
ensure_set "$password" "Password"

# Veracrypt ----------------------------------------------------------------------------------

echo "--- Veracrypt --- "
veracrypt --text --create \
    "$SELECTED_DISK" \
    --volume-type normal \
    --encryption AES \
    --hash SHA-512 \
    --filesystem exFAT \
    --password "$password" \
    --quick \
    --non-interactive
echo "--- Veracrypt --- "
